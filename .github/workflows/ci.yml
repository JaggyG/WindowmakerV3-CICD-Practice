# Basic CI Pipeline
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
    
    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 'Restore dependencies'
      run: dotnet restore
    
    - name: 'Build'
      run: dotnet build --configuration Release --no-restore
    
    - name: 'Run tests with coverage'
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: 'Generate coverage report'
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura'
    
    - name: 'Upload coverage reports'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport/
    
    - name: 'Coverage Summary'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        format: markdown
        output: both
    
    - name: 'Upload build artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: src/TestApi/bin/Release/

  code-quality:
    name: 'Code Quality Checks'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4
    
    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 'Restore dependencies'
      run: dotnet restore
    
    - name: 'Check code formatting'
      run: |
        dotnet format --verify-no-changes --verbosity diagnostic
        if [ $? -ne 0 ]; then
          echo "::error::Code formatting issues found. Run 'dotnet format' locally to fix."
          exit 1
        fi
    
    - name: 'Security scan'
      run: |
        dotnet list package --vulnerable --include-transitive
        if [ $? -ne 0 ]; then
          echo "::warning::Security vulnerabilities found in dependencies"
        fi
    
    - name: 'Check for outdated packages'
      run: |
        dotnet list package --outdated
        echo "::notice::Review outdated packages above"